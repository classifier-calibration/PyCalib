
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/visualisations/xmpl_ternary_contours.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_visualisations_xmpl_ternary_contours.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_visualisations_xmpl_ternary_contours.py:


==============================================
Draw contour function of ternary simplex space
==============================================

This example illustrates how to draw contourplots for functions with 3
probability inputs and multiple outputs.

.. GENERATED FROM PYTHON SOURCE LINES 9-19

.. code-block:: default

    # Author: Miquel Perello Nieto <miquel.perellonieto@bristol.ac.uk>
    # License: new BSD

    import matplotlib.pyplot as plt
    import numpy as np
    np.random.seed(42)

    print(__doc__)
    SAVEFIGS=False








.. GENERATED FROM PYTHON SOURCE LINES 20-22

We show first how to draw a heatmap on a ternary probability simplex, in this
case we will define a Dirichlet function and pass it with default parameters.

.. GENERATED FROM PYTHON SOURCE LINES 22-33

.. code-block:: default


    from scipy.stats import dirichlet

    from pycalib.visualisations.ternary import draw_func_contours

    function = lambda x: dirichlet.pdf(x, alpha=[5, 3, 2])
    fig = draw_func_contours(function)

    if SAVEFIGS:
        fig.savefig('fig1.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_ternary_contours_001.png
    :alt: xmpl ternary contours
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 34-37

Next we show how do use a ternary calibration model that has 3 probability
inputs and 3 ouputs. We will first simulate a calibrator by simulating 3
Dirichlet distributions and applying Bayes rule with equal prior.

.. GENERATED FROM PYTHON SOURCE LINES 37-49

.. code-block:: default


    class calibrator():
        def predict_proba(self, x):
            pred1 = dirichlet.pdf(x, alpha=[3, 1, 1])
            pred2 = dirichlet.pdf(x, alpha=[6, 7, 5])
            pred3 = dirichlet.pdf(x, alpha=[3, 4, 5])
            pred = np.vstack([pred1, pred2, pred3]).T
            pred = pred / pred.sum(axis=1)[:, None]
            return pred

    cal = calibrator()








.. GENERATED FROM PYTHON SOURCE LINES 50-53

Then we will first draw a contourmap only for the first class. We do that by
creating a lambda function and selecting the first column.
We also select a colormap for the first class.

.. GENERATED FROM PYTHON SOURCE LINES 53-61

.. code-block:: default


    function = lambda x: cal.predict_proba(x.reshape(-1, 1))[0][0]
    fig = draw_func_contours(function, cmap='Reds')

    if SAVEFIGS:
        fig.savefig('fig2.png')





.. image:: /examples/visualisations/images/sphx_glr_xmpl_ternary_contours_002.png
    :alt: xmpl ternary contours
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-65

We can look at the second class by creating a new lambda function and
selecting the second column. We will also modify how many times to subdivide
the simplex (subdiv=3). And the number of contour values (nlevels=10).

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default


    function = lambda x: cal.predict_proba(x.reshape(-1, 1))[0][1]
    fig = draw_func_contours(function, nlevels=10, subdiv=3, cmap='Oranges')

    if SAVEFIGS:
        fig.savefig('fig3.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_ternary_contours_003.png
    :alt: xmpl ternary contours
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-75

Finally we show the 3rd class with other sets of parameters and specifying
the names of each class.

.. GENERATED FROM PYTHON SOURCE LINES 75-84

.. code-block:: default


    function = lambda x: cal.predict_proba(x.reshape(-1, 1))[0][2]
    fig = draw_func_contours(function, nlevels=10, subdiv=5, cmap='Blues',
                             labels=['strawberry', 'orange', 'smurf'])

    if SAVEFIGS:
        fig.savefig('fig4.png')





.. image:: /examples/visualisations/images/sphx_glr_xmpl_ternary_contours_004.png
    :alt: xmpl ternary contours
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 85-88

In order to plot the contours of all classes in the same figure it is
necessary to loop over all subplots. We show an example that uses the
previous functions.

.. GENERATED FROM PYTHON SOURCE LINES 88-101

.. code-block:: default


    labels=['strawberry', 'orange', 'smurf']
    cmap_list = ['Reds', 'Oranges', 'Blues']
    fig = plt.figure(figsize=(10, 5))
    for c in [0, 1, 2]:
        ax = fig.add_subplot(1, 3, c+1)
        ax.set_title('{}\n$(C_{})$'.format(labels[c], c+1), loc='left')
        function = lambda x: cal.predict_proba(x.reshape(-1, 1))[0][c]
        fig = draw_func_contours(function, nlevels=30, subdiv=5, cmap=cmap_list[c],
                                 ax=ax, fig=fig)

    if SAVEFIGS:
        fig.savefig('fig5.png')



.. image:: /examples/visualisations/images/sphx_glr_xmpl_ternary_contours_005.png
    :alt: strawberry $(C_1)$, orange $(C_2)$, smurf $(C_3)$
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.111 seconds)


.. _sphx_glr_download_examples_visualisations_xmpl_ternary_contours.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/perellonieto/pycalib/gh-pages?filepath=notebooks/examples/visualisations/xmpl_ternary_contours.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: xmpl_ternary_contours.py <xmpl_ternary_contours.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: xmpl_ternary_contours.ipynb <xmpl_ternary_contours.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
