
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/visualisations/xmpl_reliability_diagram.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_visualisations_xmpl_reliability_diagram.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_visualisations_xmpl_reliability_diagram.py:


=============================
Plotting reliability diagrams
=============================

This example illustrates how to visualise the reliability diagram for a binary
probabilistic classifier.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default

    # Author: Miquel Perello Nieto <miquel.perellonieto@bristol.ac.uk>
    # License: new BSD

    print(__doc__)
    SAVEFIGS=False








.. GENERATED FROM PYTHON SOURCE LINES 16-21

This example shows different ways to visualise the reliability diagram for a
binary classification problem.

First we will generate two synthetic models and some synthetic scores and
labels.

.. GENERATED FROM PYTHON SOURCE LINES 21-49

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    np.random.seed(42)

    n_c1 = n_c2 = 500
    p = np.concatenate((np.random.beta(2, 5, n_c1),
                        np.random.beta(4, 3, n_c2)
                       ))

    y = np.concatenate((np.zeros(n_c1), np.ones(n_c2)))

    s1 = 1/(1 + np.exp(-3*(p - 0.5)))
    s2 = 1/(1 + np.exp(-8*(p - 0.5)))

    plt.scatter(s1, p, label='Model 1')
    plt.scatter(s2, p, label='Model 2')
    plt.scatter(p, y)
    plt.plot([0, 1], [0, 1], 'r--')
    plt.xlabel('Model scores')
    plt.ylabel('Sample true probability')
    plt.grid()
    plt.legend()

    p = np.vstack((1 - p, p)).T
    s1 = np.vstack((1 - s1, s1)).T
    s2 = np.vstack((1 - s2, s2)).T




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_001.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-52

A perfect calibration should be as follows, compared with the generated
scores

.. GENERATED FROM PYTHON SOURCE LINES 52-69

.. code-block:: default


    import scipy.stats as stats

    p_g_p = stats.beta.pdf(x=p[:, 1], a=3, b=2)
    p_g_n = stats.beta.pdf(x=p[:, 1], a=2, b=7)

    p_hat = p_g_p/(p_g_n+p_g_p)
    p_hat = np.vstack((1 - p_hat, p_hat)).T

    plt.scatter(p[:, 1], s1[:, 1], label='Model 1')
    plt.scatter(p[:, 1], s2[:, 1], label='Model 2')
    plt.scatter(p[:, 1], p_hat[:, 1], color='red', label='Bayes optimal correction')
    plt.xlabel('Sample true probability')
    plt.ylabel('Model scores')
    plt.grid()
    plt.legend()




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_002.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f891fc680a0>



.. GENERATED FROM PYTHON SOURCE LINES 70-73

There are at least 2 very common ways to show a reliability diagram for a
probabilistic binary classifier. Drawing a line between all the binned mean
predictions and the true proportion of positives.

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: default


    from pycalib.visualisations import plot_reliability_diagram

    fig = plot_reliability_diagram(labels=y, scores=s1, show_histogram=False)

    if SAVEFIGS:
        fig.savefig('fig1.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_003.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-84

And showing bars instead of a lineplot, usually with errorbars showing the
discrepancy with respect to a perfectly calibrated model (diagonal)

.. GENERATED FROM PYTHON SOURCE LINES 84-93

.. code-block:: default


    fig = plot_reliability_diagram(labels=y, scores=s1,
                                   class_names=['Negative', 'Positive'],
                                   show_gaps=True, show_bars=True,
                                   show_histogram=False)

    if SAVEFIGS:
        fig.savefig('fig2.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_004.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-99

However, both previous illustrations do not include the number of samples
that fall into each bin. By default the parameter show_bars is set to True as
this information is crucial to understand how reliable is each estimation,
and how this affects some of the calibration metrics.
We also specify the bin boundaries and change the color of the gaps.

.. GENERATED FROM PYTHON SOURCE LINES 99-108

.. code-block:: default


    fig = plot_reliability_diagram(labels=y, scores=s1,
                                   class_names=['Negative', 'Positive'],
                                   show_gaps=True, color_gaps='firebrick',
                                   bins=[0, .3, .4, .45, .5, .55, .6, .7, 1])

    if SAVEFIGS:
        fig.savefig('fig3.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_005.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-117

We can enable some parameters to show several aspects of the reliability
diagram. For example, we can add a histogram indicating the number of samples
on each bin (or show the count in each marker), the correction that should be
applied to the average scores in order to calibrate the model can be also
shown as red arrows pointing to the direction of the diagonal (perfectly
calibrated model). And even the true class of each sample at the y
coordinates [0 and 1] for each scored instance (50% of the data in
this example, but default is 100%).

.. GENERATED FROM PYTHON SOURCE LINES 117-130

.. code-block:: default


    fig = plot_reliability_diagram(labels=y, scores=s1,
                                   legend=['Model 1'],
                                   show_histogram=True,
                                   bins=9, class_names=['Negative', 'Positive'],
                                   show_counts=True,
                                   show_correction=True,
                                   show_samples=True,
                                   sample_proportion=0.5,
                                   hist_per_class=True)
    if SAVEFIGS:
        fig.savefig('fig4.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_006.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-137

It can be also useful to have 95% confidence intervals for each bin by
performing a binomial proportion confidence interval with various statistical
tests. This function uses https://www.statsmodels.org/stable/generated/statsmodels.stats.proportion.proportion_confint.html
thus accepts the different tests available in the statsmodels library. In the
following example we use the Clopper-Pearson interval based on Beta
distribution and a confidence interval of 95%.

.. GENERATED FROM PYTHON SOURCE LINES 137-150

.. code-block:: default


    fig = plot_reliability_diagram(labels=y, scores=s2,
                                   legend=['Model 2'],
                                   show_histogram=True,
                                   show_counts=True,
                                   bins=13, class_names=['Negative', 'Positive'],
                                   show_samples=True, sample_proportion=1.0,
                                   errorbar_interval=0.95,
                                   interval_method='beta',
                                   color_list=['orange'])
    if SAVEFIGS:
        fig.savefig('fig5.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_007.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 151-152

The function also allows the visualisation of multiple models for comparison.

.. GENERATED FROM PYTHON SOURCE LINES 152-163

.. code-block:: default


    fig = plot_reliability_diagram(labels=y, scores=[s1, s2],
                                   legend=['Model 1', 'Model 2'],
                                   show_histogram=True,
                                   bins=10, class_names=['Negative', 'Positive'],
                                   errorbar_interval=0.95,
                                   interval_method='beta')
    if SAVEFIGS:
        fig.savefig('fig6.png')





.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_008.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-167

It is possible to draw reliability diagram for multiple classes as well. We
will simulate 3 classes by changing some original labels to a 3rd class, and
modifying the scores of Model 1 and 2 to create new models 3 and 4.

.. GENERATED FROM PYTHON SOURCE LINES 167-184

.. code-block:: default


    class_2_idx = range(int(len(y)/3), int(2*len(y)/3))
    y[class_2_idx] = 2
    s1 = np.hstack((s1, s1[:, 1].reshape(-1, 1)))
    s1[class_2_idx,2] *= 3
    s1 /= s1.sum(axis=1)[:, None]
    s2 = np.hstack((s2, s2[:, 1].reshape(-1, 1)))
    s2[class_2_idx,2] *= 2
    s2 /= s2.sum(axis=1)[:, None]

    fig = plot_reliability_diagram(labels=y, scores=[s1, s2],
                                   legend=['Model 3', 'Model 4'],
                                   show_histogram=True,
                                   color_list=['darkgreen', 'chocolate'])
    if SAVEFIGS:
        fig.savefig('fig7.png')




.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_009.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 185-186

The same can be done with the bars.

.. GENERATED FROM PYTHON SOURCE LINES 186-196

.. code-block:: default


    fig = plot_reliability_diagram(labels=y, scores=s1,
                                   legend=['Model 3'],
                                   show_histogram=True,
                                   color_list=['darkgreen'],
                                   show_bars=True,
                                   show_gaps=True,
                                   color_gaps='orange')
    if SAVEFIGS:
        fig.savefig('fig8.png')



.. image:: /examples/visualisations/images/sphx_glr_xmpl_reliability_diagram_010.png
    :alt: xmpl reliability diagram
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.866 seconds)


.. _sphx_glr_download_examples_visualisations_xmpl_reliability_diagram.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/perellonieto/pycalib/gh-pages?filepath=notebooks/examples/visualisations/xmpl_reliability_diagram.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: xmpl_reliability_diagram.py <xmpl_reliability_diagram.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: xmpl_reliability_diagram.ipynb <xmpl_reliability_diagram.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
